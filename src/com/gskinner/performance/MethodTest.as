/*** Test by Grant Skinner. Feb 1, 2010* Visit www.gskinner.com/blog for documentation, updates and more free code.*** Copyright (c) 2010 Grant Skinner* * Permission is hereby granted, free of charge, to any person* obtaining a copy of this software and associated documentation* files (the "Software"), to deal in the Software without* restriction, including without limitation the rights to use,* copy, modify, merge, publish, distribute, sublicense, and/or sell* copies of the Software, and to permit persons to whom the* Software is furnished to do so, subject to the following* conditions:* * The above copyright notice and this permission notice shall be* included in all copies or substantial portions of the Software.* * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR* OTHER DEALINGS IN THE SOFTWARE.**/package com.gskinner.performance {		import flash.utils.getTimer;	import flash.system.System;		/**	* Represents a method execution test, which times how long it takes to run a function one or more times	* (as specified by <code>loops</code>).	**/	public class MethodTest extends AbstractTest {			// public properties:			/** The function / method to execute. **/		public var method:Function;				/** An array of parameters (if any) to call the method with. **/		public var params:Array;				/**		* The average increase in System.totalMemory (in kb), that occured while running the test.		* Note that System.totalMemory allocated memory for the Flash player process. This means that		* small increases in memory use may not be measured (because an additional block of memory was not allocated).		* <br/><br/>		* When examining memory usage, it is often worthwhile to use the toXML method to view the output from each		* iteration separately. You will often see different memory characteristics on the first iteration than		* subsequent runs.		**/		public var memory:int;				/**		* The average increase in System.totalMemory (in kb), that was not recovered after running the test.		* Note that System.totalMemory allocated memory for the Flash player process. This means that		* small increases in memory use may not be measured (because an additional block of memory was not allocated).		* Flash player also may not deallocate memory immediately, causing innacurate results.		* <br/><br/>		* When examining memory usage, it is often worthwhile to use the toXML method to view the output from each		* iteration separately. You will often see different memory characteristics on the first iteration than		* subsequent runs.		**/		public var retainedMemory:int;				/**		* An array of int values indicating the memory values for each iteration that was run.		**/		public var memoryLog:Array;				/**		* An array of int values indicating the retainedMemory values for each iteration that was run.		**/		public var retainedMemoryLog:Array;			// constructor:		/** Creates a new instance of Test. See properties for parameter information. **/		public function MethodTest(method:Function, params:Array=null, name:String=null, iterations:uint=0, loops:uint=1, description:String=null) {			this.method = method;			this.params = params;			retainedMemoryLog = [];			memoryLog = [];			super(name,iterations,loops,description);		}			// public methods:				/**		* PerformanceTest calls <code>run()</code> on tests to run and time them. The run() method returns the		* time for that iteration, or -1 if an error occurred. You would not generally call the run()		* method directly.		**/		override public function run():int {			//assume GC has already run, because PerformanceTest should manage that.			var mem:uint = System.totalMemory;						var err:Error;			try {				var t:uint = getTimer();				for (var i:uint=0;i<loops;i++) {					method.apply(NaN,params);				}				t = getTimer()-t;			} catch (e:Error) {				logError(e);				return -1;			}						var memory:int = System.totalMemory-mem>>10;			PerformanceTest.runGC();			var retainedMemory:int = System.totalMemory-mem>>10;						logIteration(t);			logMemory(memory, retainedMemory);			return t;		}				/**		* Returns a string representation of this Test. Very handy for tracing:<br/>		* <code>trace(myTest);</code>		**/		override public function toString():String {			var str:String = super.toString();			return str.substr(0,-1)+" memory="+memory+"]";		}				/**		* Returns XML containing all of the information about this test.		* This is very useful for building analysis tools, and for saving out results to compare them in the future.		* <br/><br/>		* I might document the format some day, but for now it's simple enough to just trace the output of this function		* to see it.		**/		override public function toXML():XML {			var xml:XML = super.toXML();			xml.@memory = memory;			xml.@retainedMemory = retainedMemory;			var l:uint = timeLog.length;			for (var i:uint=0; i<l; i++) {				xml.iteration[i].@memory = memoryLog[i];				xml.iteration[i].@retainedMemory = retainedMemoryLog[i];			}			return xml;		}			// protected methods:		/** @private **/		protected function logMemory(memory:int,retainedMemory:int):void {			memoryLog.push(memory);			retainedMemoryLog.push(retainedMemory);			var l:uint = memoryLog.length;			this.memory = this.memory*(l-1)/l+memory/l;			this.retainedMemory = this.retainedMemory*(l-1)/l+retainedMemory/l;		}			}	}